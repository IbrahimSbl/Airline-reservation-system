package Controller;

import javafx.fxml.FXML;

import javafx.scene.control.Button;

import javafx.scene.control.TextField;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Types;

import application.Model;
import javafx.event.ActionEvent;

import javafx.scene.control.Label;

import javafx.scene.layout.FlowPane;
import javafx.stage.Stage;
import javafx.scene.image.ImageView;

import javafx.scene.control.PasswordField;

import javafx.scene.input.MouseEvent;

public class PaymentPageController {
	@FXML
	private FlowPane CardView;
	@FXML
	private TextField cardName;
	@FXML
	private TextField cardNum;
	@FXML
	private TextField cvv;
	@FXML
	private TextField month;
	@FXML
	private TextField year;
	@FXML
	private Button paybtn;
	@FXML
	private Label alert;
	@FXML
	private ImageView creditCardImg;
	@FXML
	private ImageView paypalImg;
	@FXML
	private FlowPane paypalView;
	@FXML
	private TextField txt;
	@FXML
	private PasswordField pas;
	@FXML
	private Button btnpay2;
	@FXML
	private Label alert2;
	private String cl;
	private String fid;
	private String passId; 
	private Model model = new Model();
	private Connection myConn = model.connect("sa", "bob1234");
	private boolean reserved = false;
	// Event Listener on Button[#paybtn].onAction
	@FXML
	public void pay(ActionEvent event) throws SQLException {
		// TODO Autogenerated
		if(cardNum.getText().length() < 12 || cardNum.getText().length() > 12) {
			alert.setText("Non valid card number it must be of 12 number");
			return;
		}
		if(cardName.getText().equals("") || cardNum.getText().equals("") || cvv.getText().equals("") || month.getText().equals("") || year.getText().equals("")) {
			alert.setText("Fill empty fields");
			return;
		}
		int seat;
		float price;
	    //Preparing a CallableStatement to call a procedure
	    CallableStatement cstmt = myConn.prepareCall("{call RESERVE(?, ? ,?, ?, ?)}");
	    //Setting the value for the IN parameter
	    cstmt.setString(1,this.fid);
	    cstmt.setString(2, this.cl);
	    cstmt.setString(3, this.passId);
	    //Registering the type of the OUT parameters
	    cstmt.registerOutParameter(4, Types.FLOAT);
	    cstmt.registerOutParameter(5, Types.INTEGER);
	    
	    cstmt.executeUpdate();
	    
	    price = cstmt.getFloat(4);
	    seat = cstmt.getInt(5);
	    //after reservation show the passenger a message then disable the pay button
	    alert.setText(price + " $ has been deducted from your balance.Your seat number is "+seat);
	    paybtn.setDisable(true);
	    reserved = true;
	}
	// Event Listener on ImageView[#creditCardImg].onMouseClicked
	@FXML
	public void CreditCardView(MouseEvent event) {
		// TODO Autogenerated
		CardView.setVisible(true);
		paypalView.setVisible(false);
		creditCardImg.setOpacity(1);
		paypalImg.setOpacity(0.3);
		if(reserved) {
			paybtn.setDisable(true);
		}
	}
	// Event Listener on ImageView[#paypalImg].onMouseClicked
	@FXML
	public void PayPalView(MouseEvent event) {
		// TODO Autogenerated
		CardView.setVisible(false);
		paypalView.setVisible(true);
		creditCardImg.setOpacity(0.3);
		paypalImg.setOpacity(1);
		if(reserved) {
			btnpay2.setDisable(true);
		}
	}
	// Event Listener on Button[#btnpay2].onAction
	@FXML
	public void payP(ActionEvent event) throws SQLException {
		// TODO Autogenerated
		if(txt.getText().trim().equals("") || pas.getText().trim().equals("")) {
			alert2.setText("Fill empty fields");
			return;
		}
		int seat;
		float price;
	    //Preparing a CallableStatement to call a procedure
	    CallableStatement cstmt = myConn.prepareCall("{call RESERVE(?, ? ,?, ?, ?)}");
	    //Setting the value for the IN parameter
	    cstmt.setString(1,this.fid);
	    cstmt.setString(2, this.cl);
	    cstmt.setString(3, this.passId);
	    //Registering the type of the OUT parameters
	    cstmt.registerOutParameter(4, Types.FLOAT);
	    cstmt.registerOutParameter(5, Types.INTEGER);
	    
	    cstmt.executeUpdate();
	    
	    price = cstmt.getFloat(4);
	    seat = cstmt.getInt(5);
	    //after reservation show the passenger a message then disable the pay button
	    alert2.setText(price + " $ has been deducted from your account.Your seat number is "+seat);
	    btnpay2.setDisable(true); 
	    reserved = true;
	}
	public void setValues(String cl,String id,String passId) {
		this.cl = cl;
		this.fid = id;
		this.passId = passId;
	}
}
